#include <stdio.h>
#include <stdlib.h>

int is_valid(int matrix[4][4], int a, int b, int *clues)
{
  int g = 1;
  int max;
  
  for(int i = 0; i < 4; i++)
  {
      if(a != i && matrix[a][b] == matrix[i][b])
      return 0;
      if(b != i && matrix[a][b] == matrix[a][i])
      return 0;
  }
  if(a == 3 && b == 3)
  {
      for(int i = 0; i < 4; i++)
      {
          if(clues[i]==0)
            continue;
          g = 1;
          for(int j = 0; j < 3; j++)
          {
                if(j==0)
                    max = matrix[j][i];
                if(max<matrix[j+1][i])
                {
                    max = matrix[j+1][i];
                    g++;   
                }
          }
          if (g != clues[i])
            return 0;
      }
      for(int i = 12; i < 16; i++)
      {
          if(clues[i]==0)
            continue;
          g = 1;
          for(int j = 0; j < 3; j++)
          {
                if(j==0)
                    max = matrix[(15-i)][j];
                if(max<matrix[(15-i)][j+1])
                {
                    max = matrix[15-i][j+1];
                    g++;   
                }
          }
          if (g != clues[i])
            return 0;
      }
      for(int i = 4; i < 8; i++)
      {
          if(clues[i]==0)
            continue;
          g = 1;
          for(int j = 3; j > 0; j--)
          {
                if(j==3)
                    max = matrix[(i-4)][j];
                if(max<matrix[i-4][j-1])
                {
                    max = matrix[i-4][j-1];
                    g++;   
                }
          }
          if (g != clues[i])
            return 0;
      }
  }

  return 1;
}

void fill_matrix(int matrix[4][4], int a, int b, int *clues)
{
  
  int b2 = (b == 3)? 0 : b + 1;
  int a2 = (b == 3)? a + 1 : a;
  
  for(int i = 1; i < 5; i++)
  {
    matrix[a][b] = i;
    if(a == 3 && b == 3 && is_valid(matrix, a, b, clues))
    {
        for(int i = 0; i < 4; i++)
        {
            for(int j = 0; j < 4; j++)
                printf("%d ", matrix[i][j]);
            printf("\n");
        }
      printf("\n");
      return;
    }
    else if (is_valid(matrix, a, b, clues))
      fill_matrix(matrix, a2, b2, clues);
    matrix[a][b] = 0;
  }
  return;
}
  
  
int** SolvePuzzle (int *clues) {
  
  
  int matrix[4][4] = {0};
  int *result = (int *)malloc(16*4);
  result = matrix;
  fill_matrix(matrix, 0, 0, clues);
   
    
  return 0;
}

int main()
{
    int clues[] = {0, 0, 1, 2,   
  0, 2, 0, 0,   
  0, 3, 0, 0, 
  0, 1, 0, 0};
    
    SolvePuzzle(clues);

    return 0;
}
